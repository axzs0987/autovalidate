<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExcelReader</name>
    </assembly>
    <members>
        <member name="T:ExcelDataReader.ExcelDataReader`2">
            <summary>
            A generic implementation of the IExcelDataReader interface using IWorkbook/IWorksheet to enumerate data.
            </summary>
            <typeparam name="TWorkbook">A type implementing IWorkbook</typeparam>
            <typeparam name="TWorksheet">A type implementing IWorksheet</typeparam>
        </member>
        <member name="M:ExcelDataReader.ExcelDataReader`2.GetSchemaTable">
            <inheritdoc />
        </member>
        <member name="M:ExcelDataReader.ExcelDataReader`2.Reset">
            <inheritdoc />
        </member>
        <member name="T:ExcelDataReader.Core.NumberFormat.NumberFormatString">
            <summary>
            Parse ECMA-376 number format strings from Excel and other spreadsheet softwares.
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.NumberFormat.NumberFormatString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExcelDataReader.Core.NumberFormat.NumberFormatString"/> class.
            </summary>
            <param name="formatString">The number format string.</param>
        </member>
        <member name="P:ExcelDataReader.Core.NumberFormat.NumberFormatString.IsValid">
            <summary>
            Gets a value indicating whether the number format string is valid.
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.NumberFormat.NumberFormatString.FormatString">
            <summary>
            Gets the number format string.
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.NumberFormat.NumberFormatString.IsDateTimeFormat">
            <summary>
            Gets a value indicating whether the format represents a DateTime
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.NumberFormat.NumberFormatString.IsTimeSpanFormat">
            <summary>
            Gets a value indicating whether the format represents a TimeSpan
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.NumberFormat.Parser.ParseNumberTokens(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String}@,System.Boolean@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Parses as many placeholders and literals needed to format a number with optional decimals. 
            Returns number of tokens parsed, or 0 if the tokens didn't form a number.
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.BinaryFormat.BiffReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.RecordReader.Dispose">
            <inheritdoc />
        </member>
        <member name="T:ExcelDataReader.Core.OpenXmlFormat.XlsxSST">
            <summary>
            Shared string table
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.XmlFormat.XmlRecordReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.ZipWorker.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ExcelDataReader.Core.OpenXmlFormat.ZipWorker"/> class. 
            </summary>
            <param name="fileStream">The zip file stream.</param>
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.ZipWorker.GetSharedStringsReader">
            <summary>
            Gets the shared strings reader.
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.ZipWorker.GetStylesReader(System.Collections.Generic.IList{ExcelReader.ThemeColorInfo})">
            <summary>
            Gets the styles reader.
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.ZipWorker.GetWorkbookReader">
            <summary>
            Gets the workbook reader.
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.OpenXmlFormat.ZipWorker.GetWorkbookRelsStream">
            <summary>
            Gets the workbook rels stream.
            </summary>
            <returns>The rels stream.</returns>
        </member>
        <member name="P:ExcelDataReader.Core.Cell.ColumnIndex">
            <summary>
            Gets the zero-based column index.
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.Cell.EffectiveStyle">
            <summary>
            Gets the effective style on the cell. The effective style is determined from
            the Cell XF, with optional overrides from a Cell Style XF.
            </summary>
        </member>
        <member name="T:ExcelDataReader.Core.CommonWorkbook">
            <summary>
            Common handling of extended formats (XF) and mappings between file-based and global number format indices.
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.CommonWorkbook.NumberFormats">
            <summary>
            Gets the dictionary of global number format strings. Always includes the built-in formats at their
            corresponding indices and any additional formats specified in the workbook file.
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.CommonWorkbook.ExtendedFormats">
            <summary>
            Gets the Cell XFs
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.CommonWorkbook.AddNumberFormat(System.Int32,System.String)">
            <summary>
            Registers a number format string in the workbook's Formats dictionary.
            </summary>
        </member>
        <member name="T:ExcelDataReader.Core.Helpers">
            <summary>
            Helpers class
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.Helpers.IsSingleByteEncoding(System.Text.Encoding)">
            <summary>
            Determines whether the encoding is single byte or not.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>
                <see langword="true"/> if the specified encoding is single byte; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ExcelDataReader.Core.Helpers.AdjustOADateTime(System.Double,System.Boolean)">
            <summary>
            Convert a double from Excel to an OA DateTime double. 
            The returned value is normalized to the '1900' date mode and adjusted for the 1900 leap year bug.
            </summary>
        </member>
        <member name="T:ExcelDataReader.Core.IWorkbook`1">
            <summary>
            The common workbook interface between the binary and OpenXml formats
            </summary>
            <typeparam name="TWorksheet">A type implementing IWorksheet</typeparam>
        </member>
        <member name="T:ExcelDataReader.Core.IWorksheet">
            <summary>
            The common worksheet interface between the binary and OpenXml formats
            </summary>
        </member>
        <member name="M:ExcelDataReader.Core.ReferenceHelper.ParseReference(System.String,System.Int32@,System.Int32@)">
            <summary>
            Logic for the Excel dimensions. Ex: A15
            </summary>
            <param name="value">The value.</param>
            <param name="column">The column, 1-based.</param>
            <param name="row">The row, 1-based.</param>
        </member>
        <member name="P:ExcelDataReader.Core.Row.RowIndex">
            <summary>
            Gets the zero-based row index.
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.Row.Height">
            <summary>
            Gets the height of this row in points. Zero if hidden or collapsed.
            </summary>
        </member>
        <member name="P:ExcelDataReader.Core.Row.Cells">
            <summary>
            Gets the cells in this row.
            </summary>
        </member>
        <member name="T:ExcelDataReader.CellRange">
            <summary>
            A range for cells using 0 index positions. 
            </summary>
        </member>
        <member name="P:ExcelDataReader.CellRange.FromColumn">
            <summary>
            Gets the column the range starts in
            </summary>
        </member>
        <member name="P:ExcelDataReader.CellRange.FromRow">
            <summary>
            Gets the row the range starts in
            </summary>
        </member>
        <member name="P:ExcelDataReader.CellRange.ToColumn">
            <summary>
            Gets the column the range ends in
            </summary>
        </member>
        <member name="P:ExcelDataReader.CellRange.ToRow">
            <summary>
            Gets the row the range ends in
            </summary>
        </member>
        <member name="M:ExcelDataReader.CellRange.ToString">
            <inheritsdoc/>
        </member>
        <member name="T:ExcelDataReader.HeaderFooter">
            <summary>
            Header and footer text. 
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.HasDifferentFirst">
            <summary>
            Gets a value indicating whether the header and footer are different on the first page. 
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.HasDifferentOddEven">
            <summary>
            Gets a value indicating whether the header and footer are different on odd and even pages.
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.FirstHeader">
            <summary>
            Gets the header used for the first page if <see cref="P:ExcelDataReader.HeaderFooter.HasDifferentFirst"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.FirstFooter">
            <summary>
            Gets the footer used for the first page if <see cref="P:ExcelDataReader.HeaderFooter.HasDifferentFirst"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.OddHeader">
            <summary>
            Gets the header used for odd pages -or- all pages if <see cref="P:ExcelDataReader.HeaderFooter.HasDifferentOddEven"/> is <see langword="false"/>. 
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.OddFooter">
            <summary>
            Gets the footer used for odd pages -or- all pages if <see cref="P:ExcelDataReader.HeaderFooter.HasDifferentOddEven"/> is <see langword="false"/>. 
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.EvenHeader">
            <summary>
            Gets the header used for even pages if <see cref="P:ExcelDataReader.HeaderFooter.HasDifferentOddEven"/> is <see langword="true"/>. 
            </summary>
        </member>
        <member name="P:ExcelDataReader.HeaderFooter.EvenFooter">
            <summary>
            Gets the footer used for even pages if <see cref="P:ExcelDataReader.HeaderFooter.HasDifferentOddEven"/> is <see langword="true"/>. 
            </summary>
        </member>
        <member name="P:ExcelReader.WorkbookInfo.Disability">
            <summary>
            Indicates problems encountered during the parsing. 
            So you may not want to use this workbook info if there are values here.
            </summary>
        </member>
        <member name="P:ExcelReader.WorkbookInfo.Uri">
            <summary>
            Usually stores the file name to id the workbook.
            </summary>
        </member>
        <member name="P:ExcelReader.WorkbookInfo.IsBinaryFormat">
            <summary>
            Indicates whethere the workbook is binary format, some format/style details are not
            correctly extracted. So you may not want to use this workbook in this case.
            </summary>
        </member>
        <member name="P:ExcelReader.MergedCellInfo.Range">
            <summary>
            Something either like "A1" or "A1:B2"
            </summary>
        </member>
        <member name="P:ExcelReader.ColorInfo.ARGB">
            <summary>
            If you only needs one color, use this property, which can be either
            1) null meaning no value, or 2) "RRGGBB" or 3) "AARRGGBB"
            </summary>
        </member>
        <member name="P:ExcelReader.ColorInfo.PatternColor">
            <summary>
            If there is a texture pattern, here is the detail.
            </summary>
        </member>
        <member name="P:ExcelReader.ColorInfo.GradientColors">
            <summary>
            If it is a gradient color, it contains the stop-colors, if this property
            is not null, the <see cref="P:ExcelReader.ColorInfo.ARGB"/> is the color in the middle.
            </summary>
        </member>
        <member name="T:ExcelReader.ValueInfo">
            <summary>
            One and only one property is non-null.
            </summary>
        </member>
        <member name="P:ExcelReader.CellInfo.Row">
            <summary>
            1-based row index.
            </summary>
        </member>
        <member name="P:ExcelReader.CellInfo.Column">
            <summary>
            1-based column index.
            </summary>
        </member>
        <member name="P:ExcelReader.CellInfo.Value">
            <summary>
            If this is null, the cell is not used, otherwise, *one and only one* property
            in it is non-null.
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.NULL">
            <summary>
            #NULL!
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.DIV0">
            <summary>
            #DIV/0!
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.VALUE">
            <summary>
            #VALUE!
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.REF">
            <summary>
            #REF!
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.NAME">
            <summary>
            #NAME?
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.NUM">
            <summary>
            #NUM!
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.NA">
            <summary>
            #N/A
            </summary>
        </member>
        <member name="F:ExcelReader.CellError.GETTING_DATA">
            <summary>
            #GETTING_DATA
            </summary>
        </member>
    </members>
</doc>
